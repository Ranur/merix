/**
   USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS
   OF THE LICENSE STATEMENT AND LIMITED WARRANTY FURNISHED WITH
   THE PRODUCT.
   <p/>
   IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD B2N LTD., ITS
   RELATED COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY
   CLAIMS OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR
   DISTRIBUTION OF YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES
   ARISING OUT OF OR RESULTING FROM THE USE, MODIFICATION, OR
   DISTRIBUTION OF PROGRAMS OR FILES CREATED FROM, BASED ON, AND/OR
   DERIVED FROM THIS SOURCE CODE FILE.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Server sensors reading and calculation information

#if defined(MODULE_IS_CLIENT)

#define CLIENT_SENSORS_TIMEOUT  100
uint32_t CLIENT_SENSORS_LAST_EXECUTE;

float CLIENT_SENSORS_LAST_AMPS;
float CLIENT_SENSORS_LAST_VOLTS;
FLOAT_FLOAT CLIENT_SENSORS_LAST_AH;

#if defined(MODULE_SLAVE_ENABLED)
#if (MODULE_SLAVE_TYPE == 0)
float CLIENT_SENSORS_LAST_SLAVE_VOLTS;
float CLIENT_SENSORS_LAST_SLAVE_AMPS;
FLOAT_FLOAT CLIENT_SENSORS_LAST_SLAVE_AH;
#endif
#if (MODULE_SLAVE_TYPE == 1)
float CLIENT_SENSORS_LAST_SLAVE_VOLTS;
float CLIENT_SENSORS_LAST_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_TYPE == 2)
float CLIENT_SENSORS_LAST_SLAVE_VOLTS;
#endif
#if (MODULE_SLAVE_TYPE == 3)
float CLIENT_SENSORS_LAST_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_TYPE == 4)
float CLIENT_SENSORS_LAST_SLAVE_AMPS;
FLOAT_FLOAT CLIENT_SENSORS_LAST_SLAVE_AH;
#endif
#endif

#if defined(MODULE_SLAVE_SLAVE_ENABLED)
#if (MODULE_SLAVE_SLAVE_TYPE == 0)
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS;
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
FLOAT_FLOAT CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 1)
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS;
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 2)
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 3)
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 4)
float CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
FLOAT_FLOAT CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH;
#endif
#endif

inline void CLIENT_SENSORS_INIT()
{
  CLIENT_SENSORS_LAST_EXECUTE = 0;
  CLIENT_SENSORS_LAST_AMPS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_VOLTS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_AH = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);
#if defined(MODULE_SLAVE_ENABLED)
#if (MODULE_SLAVE_TYPE == 0)
  CLIENT_SENSORS_LAST_SLAVE_VOLTS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_AH = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);
#endif
#if (MODULE_SLAVE_TYPE == 1)
  CLIENT_SENSORS_LAST_SLAVE_VOLTS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_SLAVE_TYPE == 2)
  CLIENT_SENSORS_LAST_SLAVE_VOLTS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_SLAVE_TYPE == 3)
  CLIENT_SENSORS_LAST_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_SLAVE_TYPE == 4)
  CLIENT_SENSORS_LAST_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_AH = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);
#endif
#endif

#if defined(MODULE_SLAVE_SLAVE_ENABLED)
#if (MODULE_SLAVE_SLAVE_TYPE == 0)
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 1)
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 2)
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 3)
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 4)
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = MERIX_NOT_AVAILABLE;
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);
#endif
#endif


  CLIENT_SENSORS_LAST_EXECUTE = millis();

  LOG64_SET(F("CLIENT_SENSORS: INIT"));
  LOG64_NEW_LINE;
}

// TYPE 0 = volts and amps and ah, TYPE 1 - volts and amps, TYPE 2 - only volts, TYPE 3 ony amps, TYPE 4 amps and ah
inline void CLIENT_SENSORS_GET(float & amps, float & volts, FLOAT_FLOAT & ah,
                               float & volts_slave, float & amps_slave, FLOAT_FLOAT & ah_slave,
                               float & volts_slave_slave, float & amps_slave_slave, FLOAT_FLOAT & ah_slave_slave)
{
  amps = CLIENT_SENSORS_LAST_AMPS;
  volts = CLIENT_SENSORS_LAST_VOLTS;
  ah = CLIENT_SENSORS_LAST_AH;
  CLIENT_SENSORS_LAST_AH = FLOAT_FLOAT(0.0f);

//  LOG64_SET(F("SENSOR: GET :  AMPS_LAST["));
//  LOG64_SET(amps);
//  LOG64_SET(F("] VOLTS_LAST["));
//  LOG64_SET(volts);
//  LOG64_SET(F("] AH["));
//  LOG64_SET(String(ah.GET(), 12));
//  LOG64_SET(String(ah.GET_LO(), 12));
//  LOG64_SET(F("]"));
//  LOG64_NEW_LINE;

  volts_slave = MERIX_NOT_AVAILABLE;
  amps_slave = MERIX_NOT_AVAILABLE;
  ah_slave = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);

  volts_slave_slave = MERIX_NOT_AVAILABLE;
  amps_slave_slave = MERIX_NOT_AVAILABLE;
  ah_slave_slave = FLOAT_FLOAT(MERIX_NOT_AVAILABLE);

#if defined(MODULE_SLAVE_ENABLED)
#if (MODULE_SLAVE_TYPE == 0)
  volts_slave = CLIENT_SENSORS_LAST_SLAVE_VOLTS;
  amps_slave = CLIENT_SENSORS_LAST_SLAVE_AMPS;
  ah_slave = CLIENT_SENSORS_LAST_SLAVE_AH;
  CLIENT_SENSORS_LAST_SLAVE_AH = FLOAT_FLOAT(0.0f);
#endif
#if (MODULE_SLAVE_TYPE == 1)
  volts_slave = CLIENT_SENSORS_LAST_SLAVE_VOLTS;
  amps_slave = CLIENT_SENSORS_LAST_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_TYPE == 2)
  volts_slave = CLIENT_SENSORS_LAST_SLAVE_VOLTS;
#endif
#if (MODULE_SLAVE_TYPE == 3)
  amps_slave = CLIENT_SENSORS_LAST_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_TYPE == 4)
  amps_slave = CLIENT_SENSORS_LAST_SLAVE_AMPS;
  ah_slave = CLIENT_SENSORS_LAST_SLAVE_AH;
  CLIENT_SENSORS_LAST_SLAVE_AH = FLOAT_FLOAT(0.0f);
#endif
#endif

#if defined(MODULE_SLAVE_SLAVE_ENABLED)
#if (MODULE_SLAVE_SLAVE_TYPE == 0)
  volts_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS;
  amps_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
  ah_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH;
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH = FLOAT_FLOAT(0.0f);
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 1)
  volts_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS;
  amps_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 2)
  volts_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 3)
  amps_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 4)
  amps_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS;
  ah_slave_slave = CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH;
  CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH = FLOAT_FLOAT(0.0f);
#endif
#endif

}


inline uint32_t CLIENT_SENSORS_GET_TIME_INTERVAL(uint32_t now, uint32_t lastExecute)
{
  uint64_t lastExecute_ = lastExecute;
  uint64_t loopCounter_ = now;
  if (lastExecute_ > loopCounter_)
  {
    loopCounter_ += 0xFFFFFFFF;
  }

  return (uint32_t)(loopCounter_ - lastExecute_);

}

// TYPE 0 = volts and amps and ah, TYPE 1 - volts and amps, TYPE 2 - only volts, TYPE 3 ony amps, TYPE 4 amps and ah
inline void CLIENT_SENSORS_()
{
  uint32_t now = millis();
  if (DO_EXECUTE(now, CLIENT_SENSORS_LAST_EXECUTE, CLIENT_SENSORS_TIMEOUT))
  {
    uint32_t delta = CLIENT_SENSORS_GET_TIME_INTERVAL(now, CLIENT_SENSORS_LAST_EXECUTE);

    CLIENT_SENSORS_LAST_EXECUTE = now;
#if (MODULE_TYPE == 0)
    CLIENT_SENSORS_LAST_VOLTS = CLIENT_VOLTMETER_GET();
    CLIENT_SENSORS_LAST_AMPS = CLIENT_AMPERMETER_GET();
#endif
#if (MODULE_TYPE == 1)
    CLIENT_SENSORS_LAST_VOLTS = CLIENT_VOLTMETER_GET();
    CLIENT_SENSORS_LAST_AMPS = CLIENT_AMPERMETER_GET();
#endif
#if (MODULE_TYPE == 2)
    CLIENT_SENSORS_LAST_VOLTS = CLIENT_VOLTMETER_GET();
    CLIENT_SENSORS_LAST_AMPS = MERIX_NOT_AVAILABLE;
#endif
#if (MODULE_TYPE == 3)
    CLIENT_SENSORS_LAST_VOLTS = MERIX_NOT_AVAILABLE;
    CLIENT_SENSORS_LAST_AMPS = CLIENT_AMPERMETER_GET();
#endif
#if (MODULE_TYPE == 4)
    CLIENT_SENSORS_LAST_VOLTS = MERIX_NOT_AVAILABLE;
    CLIENT_SENSORS_LAST_AMPS = CLIENT_AMPERMETER_GET();
#endif


    if (CLIENT_SENSORS_LAST_AMPS > MERIX_NOT_AVAILABLE)
    {
      if (CLIENT_SENSORS_LAST_AH.GET() <= MERIX_NOT_AVAILABLE)
      {
        CLIENT_SENSORS_LAST_AH = FLOAT_FLOAT(0.0f);
      }

      FLOAT_FLOAT to_add = FLOAT_FLOAT(CLIENT_SENSORS_LAST_AMPS);
      to_add.MUL((float)delta);
      to_add.DIV(FLOAT_FLOAT(float(1000.0f * 60.0f * 60.0f)));

      CLIENT_SENSORS_LAST_AH.ADD(to_add);

    }

//    LOG64_SET(F("SENSOR: AMPS_LAST["));
//    LOG64_SET(CLIENT_SENSORS_LAST_AMPS);
//    LOG64_SET(F("] VOLTS_LAST["));
//    LOG64_SET(CLIENT_SENSORS_LAST_VOLTS);
//    LOG64_SET(F("] AH["));
//    LOG64_SET(String(CLIENT_SENSORS_LAST_AH.GET(), 12));
//    LOG64_SET(String(CLIENT_SENSORS_LAST_AH.GET_LO(), 12));
//    LOG64_SET(F("]"));
//    LOG64_NEW_LINE;

#if defined(MODULE_SLAVE_ENABLED)
#if (MODULE_SLAVE_TYPE == 0)
    CLIENT_SENSORS_LAST_SLAVE_VOLTS = CLIENT_VOLTMETER_SLAVE_GET();
    CLIENT_SENSORS_LAST_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_GET();
    if (CLIENT_SENSORS_LAST_SLAVE_AMPS > MERIX_NOT_AVAILABLE)
    {
      if (CLIENT_SENSORS_LAST_SLAVE_AH.GET() <= MERIX_NOT_AVAILABLE)
      {
        CLIENT_SENSORS_LAST_SLAVE_AH = FLOAT_FLOAT(0.0f);
      }

      FLOAT_FLOAT to_add = FLOAT_FLOAT(CLIENT_SENSORS_LAST_SLAVE_AMPS);
      to_add.MUL((float)delta);
      to_add.DIV(FLOAT_FLOAT(float(1000.0f * 60.0f * 60.0f)));

      CLIENT_SENSORS_LAST_SLAVE_AH.ADD(to_add);
    }
#endif
#if (MODULE_SLAVE_TYPE == 1)
    CLIENT_SENSORS_LAST_SLAVE_VOLTS = CLIENT_VOLTMETER_SLAVE_GET();
    CLIENT_SENSORS_LAST_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_GET();
#endif
#if (MODULE_SLAVE_TYPE == 2)
    CLIENT_SENSORS_LAST_SLAVE_VOLTS = CLIENT_VOLTMETER_SLAVE_GET();
#endif
#if (MODULE_SLAVE_TYPE == 3)
    CLIENT_SENSORS_LAST_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_GET();
#endif
#if (MODULE_SLAVE_TYPE == 4)
    CLIENT_SENSORS_LAST_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_GET();
    if (CLIENT_SENSORS_LAST_SLAVE_AMPS > MERIX_NOT_AVAILABLE)
    {
      if (CLIENT_SENSORS_LAST_SLAVE_AH.GET() <= MERIX_NOT_AVAILABLE)
      {
        CLIENT_SENSORS_LAST_SLAVE_AH = FLOAT_FLOAT(0.0f);
      }

      FLOAT_FLOAT to_add = FLOAT_FLOAT(CLIENT_SENSORS_LAST_SLAVE_AMPS);
      to_add.MUL((float)delta);
      to_add.DIV(FLOAT_FLOAT(float(1000.0f * 60.0f * 60.0f)));

      CLIENT_SENSORS_LAST_SLAVE_AH.ADD(to_add);
    }
#endif
#endif

#if defined(MODULE_SLAVE_SLAVE_ENABLED)
#if (MODULE_SLAVE_SLAVE_TYPE == 0)
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS = CLIENT_VOLTMETER_SLAVE_SLAVE_GET();
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_SLAVE_GET();
    if (CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS > MERIX_NOT_AVAILABLE)
    {
      if (CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH.GET() <= MERIX_NOT_AVAILABLE)
      {
        CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH = FLOAT_FLOAT(0.0f);
      }

      FLOAT_FLOAT to_add = FLOAT_FLOAT(CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS);
      to_add.MUL((float)delta);
      to_add.DIV(FLOAT_FLOAT(float(1000.0f * 60.0f * 60.0f)));

      CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH.ADD(to_add);
    }
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 1)
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS = CLIENT_VOLTMETER_SLAVE_SLAVE_GET();
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_SLAVE_GET();
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 2)
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_VOLTS = CLIENT_VOLTMETER_SLAVE_SLAVE_GET();
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 3)
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_SLAVE_GET();
#endif
#if (MODULE_SLAVE_SLAVE_TYPE == 4)
    CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS = CLIENT_AMPERMETER_SLAVE_SLAVE_GET();
    if (CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS > MERIX_NOT_AVAILABLE)
    {
      if (CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH.GET() <= MERIX_NOT_AVAILABLE)
      {
        CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH = FLOAT_FLOAT(0.0f);
      }

      FLOAT_FLOAT to_add = FLOAT_FLOAT(CLIENT_SENSORS_LAST_SLAVE_SLAVE_AMPS);
      to_add.MUL((float)delta);
      to_add.DIV(FLOAT_FLOAT(float(1000.0f * 60.0f * 60.0f)));

      CLIENT_SENSORS_LAST_SLAVE_SLAVE_AH.ADD(to_add);
    }
#endif
#endif

  }
}
#endif

